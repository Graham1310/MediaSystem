/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package assignment3;

import static assignment3.LogInUI2.connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author Graham
 */
public class ContentHeirachy extends javax.swing.JFrame {

    private Project selectedProject;
    private  randomSQLFunctionsReady randSQL = new randomSQLFunctionsReady();
    
    private SetOfProjects AllProjects = new SetOfProjects();
    private SetOfElements setOfElementsOnProject = new SetOfElements();
    private SetOfAssets setOfAssetsOnElement = new SetOfAssets();
 
    /**
     * Creates new form ContentHeirachy
     */
    public ContentHeirachy() {
        initComponents();
        LoadUpTree();
    }

    ContentHeirachy(Project selectedPro, SetOfProjects projects) {

        selectedProject = selectedPro;
        AllProjects = projects;
        initComponents();
        LoadUpTree();
        
        elementsCbo.setEnabled(false);
        assetCbo.setEnabled(false); 
        projectsCbo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        projectsCbo = new javax.swing.JComboBox();
        elementsCbo = new javax.swing.JComboBox();
        assetCbo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jLabel1.setText("Move Element to Project:");

        jLabel2.setText("Move Asset to Element:");

        jLabel3.setText("Move Task to Asset:");

        jButton1.setText("Save Heirachy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(projectsCbo, 0, 129, Short.MAX_VALUE)
                            .addComponent(elementsCbo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(assetCbo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(projectsCbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(elementsCbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(assetCbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        // TODO add your handling code here:
          projectsCbo.removeAllItems();
          elementsCbo.removeAllItems();    
          assetCbo.removeAllItems();
        DefaultMutableTreeNode pnode2 = new DefaultMutableTreeNode();
          
         DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
         if (node != null){
         DefaultMutableTreeNode pnode = (DefaultMutableTreeNode) node.getParent();
         pnode2 = (DefaultMutableTreeNode) pnode.getParent();
                        
        
         if (node.getUserObject() instanceof Asset) {
            projectsCbo.setEnabled(false);
            elementsCbo.setEnabled(true);          
            assetCbo.setEnabled(false); 
            //load all elements for project
           Project project = (Project) pnode2.getUserObject();           
           fillInElementsOnProjectList(project.getProjectID());
            //fillInElementsOnProjectList();
            }
     
        if (node.getUserObject() instanceof Task) {
            projectsCbo.setEnabled(false);
            elementsCbo.setEnabled(false);          
            assetCbo.setEnabled(true); 
                        
             Element element = (Element) pnode2.getUserObject();
            fillInAssetOnElementsList(element.getElementID());
             //task = (Task) node.getParent().getUserObject();
           }
          
        if (node.getUserObject() instanceof Element) {
            projectsCbo.setEnabled(true);
            elementsCbo.setEnabled(false);          
            assetCbo.setEnabled(false);           
            
            for (int i = 0; i< (AllProjects.size()); i++)
          {
              projectsCbo.addItem(AllProjects.get(i));
          }           
           }
        
          UserListCellRenderer renderer = new UserListCellRenderer();
          projectsCbo.setRenderer(renderer);
          assetCbo.setRenderer(renderer);
          elementsCbo.setRenderer(renderer);
         }
    }//GEN-LAST:event_jTree1ValueChanged

     private void fillInAssetOnElementsList(int ElementID){
    try{
        ResultSet assetsOnElementsListResultSet = null;

        Statement statement;
        //Element element = (Element) listElementsList.getSelectedValue();
        //int SElementID = element.getElementID();

        statement = connection.createStatement();
        assetsOnElementsListResultSet = statement.executeQuery("SELECT Asset.ID,Asset.assetName, Asset.assetType, SetOFAssets.elementID" +
                                                " FROM Asset LEFT JOIN SetOFAssets ON Asset.ID = SetOFAssets.assetID" +
                                                " WHERE (((SetOFAssets.elementID) = " + ElementID  + " ));");
        int assetID;
        String assetName;      
        String assetType; 
        SetOfTasks assetTasks = new SetOfTasks();
        
        while(assetsOnElementsListResultSet.next()){
            assetID = assetsOnElementsListResultSet.getInt("ID");
            assetName = assetsOnElementsListResultSet.getString("assetName");
            assetType = assetsOnElementsListResultSet.getString("assetType");                      
            Asset newAsset = new Asset(assetID, assetName, assetType, assetTasks);
            //listOfAssets.add(newAsset);
            //listAssetList.setListData(listOfAssets);
            //AssetsListCellRenderer renderer = new AssetsListCellRenderer();  //custom cell renderer to display property rather than useless object.toString()
            //listAssetList.setCellRenderer(renderer);  
            assetCbo.addItem(newAsset);
            
        }
    }catch(SQLException err)
            {
                System.out.println("ERROR: " + err);
                    JOptionPane.showMessageDialog(null,"* Cannot connect to database! *");
                    System.exit(1);
            }
    }
    
    private void fillInElementsOnProjectList(int projectID){
            try{
                ResultSet elementsOnProjectListResultSet = null;
                Statement statement;
                statement = connection.createStatement();
                elementsOnProjectListResultSet = statement.executeQuery("SELECT Element.elementID, Element.elementName, SetOFElements.ProjectID FROM Element INNER JOIN SetOFElements ON Element.[elementID] = SetOFElements.[elementID] WHERE ProjectID="+ projectID +";"); 
                int elementID;
                String elementName;

                while(elementsOnProjectListResultSet.next())
                {
                    elementID = elementsOnProjectListResultSet.getInt("elementID");
                    elementName = elementsOnProjectListResultSet.getString("elementName");
                    Element element = new Element(elementID,elementName);
                   elementsCbo.addItem(element);
                    
                }
            }catch(SQLException err)
                    {
                        System.out.println("ERROR: " + err);
                        JOptionPane.showMessageDialog(null,"* Cannot connect to database! *");
                        System.exit(1);
                    }
        
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       DefaultMutableTreeNode node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        
        if (node.getUserObject() instanceof Asset) {
          //save asset on to new element
            Element newElement = (Element) elementsCbo.getSelectedItem();
            Asset selectedAsset = (Asset) node.getUserObject();
            UpdateAsset(newElement, selectedAsset);
        }
     
        if (node.getUserObject() instanceof Task) {
            //save task on to new asset
            Asset newAsset = (Asset) assetCbo.getSelectedItem();
            Task selectedTask = (Task) node.getUserObject();
            
            UpdateTask(newAsset, selectedTask);
           }
          
        if (node.getUserObject() instanceof Element) {
            //save element on to new project
            Project newProject = (Project) projectsCbo.getSelectedItem();
            Element selectedElement = (Element) node.getUserObject();
           DefaultMutableTreeNode pnode2 = (DefaultMutableTreeNode) node.getParent();
           Project oldProject = (Project) pnode2.getUserObject();
           SetOfTasks AllTasksOnElement = new SetOfTasks();  
           Enumeration num = node.children();
           
            //node.children().
                    while (num.hasMoreElements()) {
                        //num.nextElement();
                        //Enumeration num2 = num..children();
                         DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) num.nextElement();
                          Enumeration num2 = childNode.children();
                           while (num2.hasMoreElements()) {
                                DefaultMutableTreeNode childChildNode = (DefaultMutableTreeNode) num2.nextElement();
                                AllTasksOnElement.add((Task) childChildNode.getUserObject()); 
                            }
                    }
                    
                    
                    
            UpdateElement(newProject, selectedElement, oldProject, AllTasksOnElement);
        }
           
         LoadUpTree();    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdateAsset(Element element , Asset Asset){
         try {
             Statement statement;
            statement = connection.createStatement();
            statement.executeUpdate("UPDATE SetOFAssets SET elementID='"+ element.getElementID() + "' WHERE assetID="+ Asset.getAssetID() +";");
            
        } catch (SQLException ex) {
            Logger.getLogger(ManageTasksUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    private void UpdateTask(Asset asset, Task task){
         try {
             Statement statement;
            statement = connection.createStatement();
            statement.executeUpdate("UPDATE Task SET assetID='"+ asset.getAssetID() + "' WHERE taskID="+ task.getTaskID() +";");
            
        } catch (SQLException ex) {
            Logger.getLogger(ManageTasksUI.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    
     private void UpdateElement(Project project, Element element, Project oldProject, SetOfTasks AllTasksOnElement){
        try {
            
            Statement statement;
            statement = connection.createStatement();
            //statement.executeUpdate("UPDATE Element SET elementName='" + element.getName()+ "' WHERE elementID = " + tempElementID +";");
            
            statement.executeUpdate("Update SetOFElements SET ProjectID = "+ project.getProjectID() + " WHERE elementID = " + element.getElementID()+ ";");
            
             for (int i = 0; i< (AllTasksOnElement.size()); i++)
             {
                 statement.executeUpdate("Update Task SET ProjectID = "+ project.getProjectID() + " WHERE taskID =" + AllTasksOnElement.get(i).getTaskID() + " ;");
            //UPDATE ALL TASKS
             }
            
            
        } catch (SQLException ex) {
            
        }
    };
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContentHeirachy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContentHeirachy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContentHeirachy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContentHeirachy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContentHeirachy().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox assetCbo;
    private javax.swing.JComboBox elementsCbo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JComboBox projectsCbo;
    // End of variables declaration//GEN-END:variables

    private void LoadUpTree() {
    //DefaultTreeModel model = new DefaultTreeModel("root");
    
    DefaultMutableTreeNode root = new DefaultMutableTreeNode(selectedProject) ;
    DefaultTreeModel treeModel = new DefaultTreeModel(root);
    
    DefaultMutableTreeNode elementNode = null;
    DefaultMutableTreeNode assetNode = null;
    DefaultMutableTreeNode taskNode = null;
    
    
    //For loop to get all elements
    //within that get all assets
    //within that get tasks for the assets
    //SetOfElements setOfElement = selectedProject.getElementCollection();
    
    try{
                ResultSet elementsOnProjectListResultSet = null;
                Statement ElementStatement;
                ElementStatement = connection.createStatement();
                elementsOnProjectListResultSet = ElementStatement.executeQuery("SELECT Element.elementID, Element.elementName, SetOFElements.ProjectID FROM Element INNER JOIN SetOFElements ON Element.[elementID] = SetOFElements.[elementID] WHERE ProjectID="+ selectedProject.getProjectID() +";"); 
                int elementID;
                String elementName;

                while(elementsOnProjectListResultSet.next())
                {
                    elementID = elementsOnProjectListResultSet.getInt("elementID");
                    elementName = elementsOnProjectListResultSet.getString("elementName");
                    Element element = new Element(elementID,elementName);
                    elementNode = new DefaultMutableTreeNode(element);
                    
                     Statement AssetStatement;
                    ElementStatement = connection.createStatement();
                    ResultSet assetsOnElementsListResultSet = null;
                    AssetStatement = connection.createStatement();
                    assetsOnElementsListResultSet = AssetStatement.executeQuery("SELECT Asset.ID,Asset.assetName, Asset.assetType, SetOFAssets.elementID" +
                                                " FROM Asset LEFT JOIN SetOFAssets ON Asset.ID = SetOFAssets.assetID" +
                                                " WHERE (((SetOFAssets.elementID) = " + elementID  + " ));");
                    int assetID;
                    String assetName;      
                    String assetType; 
                    SetOfTasks assetTasks = new SetOfTasks();

                    while(assetsOnElementsListResultSet.next()){
                        assetID = assetsOnElementsListResultSet.getInt("ID");
                        assetName = assetsOnElementsListResultSet.getString("assetName");
                        assetType = assetsOnElementsListResultSet.getString("assetType");                      
                        Asset newAsset = new Asset(assetID, assetName, assetType, assetTasks);
                       
                        assetNode = new DefaultMutableTreeNode(newAsset);
                     
                         Statement TaskStatement;
                         TaskStatement = connection.createStatement();
                         ResultSet tasksOnAssetListResultSet = null;
                         tasksOnAssetListResultSet = TaskStatement.executeQuery("SELECT * FROM Task WHERE assetID = " + newAsset.getAssetID() + ";");  
                         randSQL.loadAllUsers();
                         SetOfUsers allusers = randSQL.getAllUsers();

                        while (tasksOnAssetListResultSet.next()){
                            int taskID;
                            int projectID;                        
                            User responsible = null;
                            int taskPriority;
                            String status;
                            String taskName;
                            String taskType;
                            taskID = tasksOnAssetListResultSet.getInt("taskID");
                            projectID = tasksOnAssetListResultSet.getInt("projectID");
   
                            for(int i=0; i<allusers.size();i++){
                                if(tasksOnAssetListResultSet.getInt("responsiblePerson")==allusers.get(i).getUserID());
                                {
                                    responsible = allusers.get(i);
                                    break;
                                }     
                             }                 
                              taskPriority = tasksOnAssetListResultSet.getInt("taskPriority");
                              status = tasksOnAssetListResultSet.getString("status");
                              taskName = tasksOnAssetListResultSet.getString("taskName");
                              taskType = tasksOnAssetListResultSet.getString("type");                   
                              Task newTask = new Task(taskID, responsible,taskName, taskPriority , status,projectID, newAsset, taskType);                     
                                            
                               taskNode = new DefaultMutableTreeNode(newTask);
                               newAsset.getSetOfTasks().add(newTask);
                               assetNode.add(taskNode);
                         }                     

                     elementNode.add(assetNode);
                    }
                    
                    
                    TreeRenderer renderer = new TreeRenderer();
                    jTree1.setCellRenderer(renderer);
                    treeModel.insertNodeInto(elementNode, root, root.getChildCount());
                  
                     //AssetsListCellRenderer renderer = new AssetsListCellRenderer();  //custom cell renderer to display property rather than useless object.toString()
            //listAssetList.setCellRenderer(renderer);  

                }
            }catch(SQLException err)
                    {
                        System.out.println("ERROR: " + err);
                        JOptionPane.showMessageDialog(null,"* Cannot connect to database! *");
                        System.exit(1);
                    }

    
     jTree1.setModel(treeModel);
    }
    
    
    
    
}
